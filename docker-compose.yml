services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: ewlarson/btaa-geometadata-api:0.1.1
    container_name: btaa-geometadata-api
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@paradedb:5432/btaa_geometadata_api
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=btaa_geometadata_api
      - LOG_PATH=/app/logs
      - APPLICATION_URL=http://localhost:8000
      - CORS_ORIGINS=http://localhost:5173,https://ewlarson.github.io,https://btaa-geometadata-api.ngrok.io
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_TTL=604800  # 7 days in seconds
      - LOG_LEVEL=DEBUG
      - ENDPOINT_CACHE=true  # Enable endpoint caching
      - GAZETTEER_CACHE_TTL=3600  # 1 hour in seconds
    ports:
      - "8000:8000"
    depends_on:
      elasticsearch:
        condition: service_healthy
      paradedb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - .:/app
    networks:
      - elastic
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: btaa-geometadata-api-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=85%
      - cluster.routing.allocation.disk.watermark.high=90%
      - cluster.routing.allocation.disk.watermark.flood_stage=95%
    ports:
      - "9200:9200"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - elastic
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  paradedb:
    image: paradedb/paradedb:0.15.14
    container_name: btaa-geometadata-api-paradedb
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=btaa_geometadata_api
    ports:
      - "2345:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d btaa_geometadata_api"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: btaa-geometadata-api-redis
    command: redis-server --appendonly yes  # Enable persistence
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - elastic
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "apt-get update && apt-get install -y tesseract-ocr && celery -A app.tasks.worker worker --loglevel=INFO"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@paradedb:5432/btaa_geometadata_api
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_TTL=604800
      - PYTHONUNBUFFERED=1  # Important for logging
      - LOG_LEVEL=DEBUG
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-3.5-turbo}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - paradedb
    networks:
      - elastic

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "cd /app && celery -A app.tasks.worker flower --port=5555"
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@paradedb:5432/btaa_geometadata_api
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_TTL=604800
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG
    networks:
      - elastic
    depends_on:
      - redis
      - paradedb
      - celery_worker

volumes:
  elasticsearch-data:
  paradedb-data:
  redis-data:

networks:
  elastic:
    driver: bridge 